length(unique_terms)
dat <- list(c("a","b", "c), c("a", "d"), c("e", "b"))
dat <- list(c("a","b", "c"), c("a", "d"), c("e", "b"))
dat
dat=="a"
lapply(dat, function(x) x == "a"_
lapply(dat, function(x) x == "a")
lapply(dat, function(x) max(x == "a"))
unlist(lapply(dat, function(x) max(x == "a")))
unlist(lapply(dat, function(x) max(x == "a")))
sum(lapply(dat, function(x) max(x == "a")))
idf <- sapply(unique_terms,
function(term){
in_docs <- unlist(lapply(documents, function(doc) max(doc == term))
sum(in_docs) / ndocs   #idf calc
})
ndocs <- length(documents)
idf <- sapply(unique_terms,
function(term){
in_docs <- unlist(lapply(documents, function(doc) max(doc == term))
sum(in_docs) / ndocs   #idf calc
}))
idf <- sapply(unique_terms,
function(term){
in_docs <- unlist(lapply(documents, function(doc) max(doc == term)))
sum(in_docs) / ndocs   #idf calc
}))
idf <- sapply(unique_terms,
function(term){
in_docs <- unlist(lapply(documents, function(doc) max(doc == term)))
sum(in_docs) / ndocs   #idf calc
})
idf
head(idf)
names(idf)
head(tf)
length(tf)
v
v <- c(1,2,3)
names(v) <- c("a", "b", "c")
v["a"]
v[["a"]]
v[c("a", "c")]
class(names(idf))
class(names(tf))
tfidf <- lapply(tf, function(x) x * idf[names(x)])
head(tfidf[[1]])
names(tfidf)
head(tfidf[[1]])
head(tfidf[[2]])
head(tfidf[[100]])
head(documents[[1]])
head(documents[[1]])
v
v[v]
v[v[1:2]]
v[v[1:3]]
v <- c(10, 20, 30)
names(v) <- c("a", "b", "c")
v[v]
v[names(v)]
tf[1]
head(tf[1])
head(tf[[1]])
tf
head(tf[[1]])
unique_terms
head(tf[[1]])
head(tf[[1]])[1]
head(tf[[1]])[[1]]
names(tf[[1]])
null(names(tf[[1]]))
names(tf[[1]])==" "
sum(names(tf[[1]])==" ")
sum(names(tf[[1]])==" ")
names(tf[[1]])
tf[[1]])[1]
tf[[1]][1]
names(tf[[1]][1])
names(tf[[1]][1])=""
source('~/Documents/Career/cloudera/interview_questions.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
names(tf[[1]][1])==""
documents <- lapply(sites, function(x) {
terms <- unlist(strsplit(readLines(x)," "))
terms[!is.na(terms)]
}) #return a list of terms, excluding nulls
names(documents) <- sites
tf <- lapply(documents, function(x) table(x) / length(x)) # calculate tf
names(tf[[1]][1])==""
is.na("")
documents <- lapply(sites, function(x) {
terms <- unlist(strsplit(readLines(x)," "))
terms[!(is.na(terms) && terms=="")]  #return a list of terms, excluding nulls and empty stringsß
})
names(documents) <- sites
tf <- lapply(documents, function(x) table(x) / length(x)) # calculate tf
names(tf[[1]][1])==""
?is.blank
names(tf[[1]][1])
names(tf[[1]][1])==""
TRUE & FALSE
TRUE && FALSE
source('~/Documents/Career/cloudera/interview_questions.R', echo=TRUE)
names(tf[[1]][1])==""
names(tf[[1]][1])
lapply(documents, function(x) max(x==""))
documents[[1]]
documents[[1]]!=""
documents[[1]]
documents[[1]]!=""
documents[[1]][documents[[1]]!=""]
documents[[1]][documents[[1]]!=""]==""
sum(documents[[1]][documents[[1]]!=""]=="")
documents <- lapply(sites, function(x) {
terms <- unlist(strsplit(readLines(x)," "))
terms[terms !="")]  #return a list of terms, excluding nulls and empty stringsß
})
documents <- lapply(sites, function(x) {
terms <- unlist(strsplit(readLines(x)," "))
terms[terms !=""]  #return a list of terms, excluding nulls and empty stringsß
})
documents <- lapply(sites, function(x) {
terms <- unlist(strsplit(readLines(x)," "))
terms[terms !=""]  #return a list of terms, excluding nulls and empty stringsß
})
sites <- c("http://symfun.wordpress.com/2015/01/13/fibonacci-sequence-fun/",
"http://symfun.wordpress.com/2015/01/10/heap-ml-implementation/",
"http://symfun.wordpress.com/2014/12/23/look-and-say/")
documents <- lapply(sites, function(x) {
terms <- unlist(strsplit(readLines(x)," "))
terms[terms !=""]  #return a list of terms, excluding nulls and empty stringsß
})
names(documents) <- sites
tf <- lapply(documents, function(x) table(x) / length(x)) # calculate tf
tf[[1]]
names(tf[[1]])==""
sum(names(tf[[1]])=="")
names(documents) <- sites
tf <- lapply(documents, function(x) table(x) / length(x)) # calculate tf
unique_terms <- unique(unlist(documents))
ndocs <- length(documents)
idf <- sapply(unique_terms,
function(term){
in_docs <- unlist(lapply(documents, function(doc) max(doc == term)))
sum(in_docs) / ndocs   #idf calc
})
tfidf <- lapply(tf, function(x) x * idf[names(x)] )
head(tfidf[[1]])
sum(is.na(tfidf[[1]]))
lapplt(tfidf, sum(is.na(x)))
lapply(tfidf, sum(is.na(x)))
lapply(tfidf, function(x) sum(is.na(x)))
source('~/Documents/Career/cloudera/interview_questions.R', echo=TRUE)
rng(10)
w
sampled_dist
?dist
sampled_dist
sampled
table(sampled_dist)
table(sampled_dist)
table(sampled)
table(sampled) / length(sampled)
as.data.frame(table(sampled) / length(sampled))
theory <- data.frame(weights = weights)
weights
weights <- c(0, 0.1, 0.2, 0.3, 0.4, 0.5)
weights
theory <- data.frame(weights = weights)
theory
source('~/.active-rstudio-document', echo=TRUE)
calcdist(c(0, 1), c(0.5, 0.5))
sampled <- c(0, 1)
weights <- c(0.5, 0.5)
actual <- as.data.frame(table(sampled) / length(sampled))
actual
theory <- data.frame(weights = weights)
theory
dat <- merge(theory, actual, all.x = T)
dat
calcdist <- function(sampled, weights)
{
actual <- as.data.frame(table(sampled) / length(sampled))
theory <- data.frame(weights = weights)
dat <- merge(theory, actual, all.x = T)
dat$Freq[is.na(dat$Freq)] <- 0
dat
}
calcdist(c(0, 1), c(0.5, 0.5))
seq_along(c("a", "b"))
##returns a data frame with the sample distribution, the weights, and the difference
calcdist <- function(sampled, weights)
{
actual <- as.data.frame(table(sampled) / length(sampled))
theory <- data.frame(sampled = seq_along(weights) - 1, weights = weights)
dat <- merge(theory, actual, all.x = T)
dat$Freq[is.na(dat$Freq)] <- 0
dat
}
calcdist <- function(sampled, weights)
{
actual <- as.data.frame(table(sampled) / length(sampled))
names(actual)[1] <- "id"
theory <- data.frame(id = seq_along(weights) - 1, weights = weights)
dat <- merge(theory, actual, by="id", all.x = T)
dat$Freq[is.na(dat$Freq)] <- 0
dat
}
calcdist(c(0, 1), c(0.5, 0.5))
calcdist(c(0), c(0.5, 0.5))
source('~/PersonalProjects/symfun/biaseddice/biasedAnalysis.R', echo=TRUE)
calcdist(c(0), c(0.5, 0.5))
source('~/PersonalProjects/symfun/biaseddice/biasedAnalysis.R', echo=TRUE)
calcdist(c(0), c(0.5, 0.5))
10 ^ c(1, 2, 3, 4)
sizes <- 10 ^ c(1, 2, 3, 4, 5)
sizes
?ldply
library(plyr)
?ldply
sdply
vdply
adply
?adply
#analyze
analyze <- function(n, weights) {
sampled <- rng(n, weights)
calcdist(sampled, weights)
}
?set.seed
dice <- (function(x) x / sum(x)) runif(6)
dice <- (function(x) x / sum(x))(runif(6))
set.seed(0)
dice <- (function(x) x / sum(x))(runif(6))
dice
sum(dice)
lapply(sizes, function(x) analyze(x, dice))
lapply(sizes, function(x){ dat <- analyze(x, dice); dat$sample_size <- n)
lapply(sizes, function(x){ dat <- analyze(x, dice); dat$sample_size <- n })
lapply(sizes, function(x){ dat <- analyze(x, dice); dat$sample_size <- x })
lapply(sizes, function(x){ dat <- analyze(x, dice); dat$sample_size <- x; dat })
dat <- do.call(rbind, dat)
dat
dat <- lapply(sizes, function(x){ dat <- analyze(x, dice); dat$sample_size <- x; dat })
dat
unlist(dat)
?do.call
do.call(rbind, dat)
library(ggplot2)
?ggplt
?ggplot
ggplot(dat, aes(x = sample_size, y = sampled_dist)) + geom_bar() + facet_wrap( ~id)
dat <- do.call(rbind, dat)
ggplot(dat, aes(x = sample_size, y = sampled_dist)) + geom_bar() + facet_wrap( ~id)
?geom_bar
ggplot(dat, aes(x = sample_size, y = sampled_dist)) + geom_bar(stat="actual") + facet_wrap( ~id)
ggplot(dat, aes(x = sample_size, y = sampled_dist)) + geom_bar(stat="identity") + facet_wrap( ~id)
dat
source('~/PersonalProjects/symfun/biaseddice/biasedAnalysis.R', echo=TRUE)
source('~/PersonalProjects/symfun/biaseddice/biasedAnalysis.R', echo=TRUE)
dat
ggplot(dat, aes(x = factor(sample_size), y = sampled_dist)) + geom_bar(stat="identity") + facet_wrap( ~id)
ggplot(dat, aes(x = factor(sample_size), y = sampled_dist)) + geom_bar(stat="identity") +
facet_wrap( ~id) + theme(axis.text.x = element_text(angle = 90))
?geom_hline
ggplot(dat, aes(x = factor(sample_size), y = sampled_dist)) + geom_bar(stat="identity") +
geom_hline(yintercept = weights, aes(color = "red", linetype = "dashed")) +
facet_wrap( ~id) + theme(axis.text.x = element_text(angle = 90))
ggplot(dat, aes(x = factor(sample_size), y = sampled_dist)) + geom_bar(stat="identity") +
geom_hline(aes(yintercept = weights, color = "red", linetype = "dashed")) +
facet_wrap( ~id) + theme(axis.text.x = element_text(angle = 90))
?theme
ggplot(dat, aes(x = factor(sample_size), y = sampled_dist)) + geom_bar(stat="identity") +
geom_hline(aes(yintercept = weights, color = "red", linetype = "dashed")) +
facet_wrap( ~id) + theme(axis.text.x = element_text(angle = 90), axis.title.x = "Sampled Size", axis.title.y = "Frequency Distribution")
ggplot(dat, aes(x = factor(sample_size), y = sampled_dist)) + geom_bar(stat="identity") +
geom_hline(aes(yintercept = weights, color = "red", linetype = "dashed")) +
facet_wrap( ~id) + theme(axis.text.x = element_text(angle = 90), axis.text.x = "Sampled Size", axis.text.y = "Frequency Distribution")
?labs
ggplot(dat, aes(x = factor(sample_size), y = sampled_dist)) + geom_bar(stat="identity") +
geom_hline(aes(yintercept = weights, color = "red", linetype = "dashed")) +
facet_wrap( ~id) + theme(axis.text.x = element_text(angle = 90)) + labs(x = "Sample Size", y = "Frequency Distribution")
?labs
ggplot(dat, aes(x = factor(sample_size), y = sampled_dist)) + geom_bar(stat="identity") +
geom_hline(aes(yintercept = weights, color = "red", linetype = "dashed")) +
facet_wrap( ~id) + theme(axis.text.x = element_text(angle = 90)) +
labs(title = "RNG Comparisong", x = "Sample Size", y = "Frequency Distribution")
source('~/PersonalProjects/symfun/biaseddice/biasedAnalysis.R', echo=TRUE)
?facet_wtap
?facet_wrap
ggplot(dat, aes(x = factor(sample_size), y = sampled_dist)) + geom_bar(stat="identity") +
geom_hline(aes(yintercept = weights, color = "red", linetype = "dashed")) +
facet_wrap( ~id, scales = "free_y") + theme(axis.text.x = element_text(angle = 90)) +
labs(title = "RNG Comparison", x = "Sample Size", y = "Frequency Distribution")
ggplot(dat, aes(x = factor(sample_size), y = sampled_dist)) + geom_bar(stat="identity") +
geom_hline(aes(yintercept = weights, color = "red", linetype = "dashed")) +
facet_wrap( ~id, scales) + theme(axis.text.x = element_text(angle = 90)) +
labs(title = "RNG Comparison", x = "Sample Size", y = "Frequency Distribution")
ggplot(dat, aes(x = factor(sample_size), y = sampled_dist)) + geom_bar(stat="identity") +
geom_hline(aes(yintercept = weights, color = "red", linetype = "dashed")) +
facet_wrap( ~id) + theme(axis.text.x = element_text(angle = 90)) +
labs(title = "RNG Comparison", x = "Sample Size", y = "Frequency Distribution")
length(c(1,2,3))
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
combs(c(1,2,3))
source('~/.active-rstudio-document', echo=TRUE)
combs(c(1,2,3))
2 != 3
ls <- c(1,2,3)
ls[ls != 2]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
combs(c(1,2,3))
c(c(1,2,3),c(10,20,30))
dim(c(c(1,2,3),c(10,20,30)))
dims(c(c(1,2,3),c(10,20,30)))
c(list(1,2,3), 4)
list(1,2,3)
list(c(1,2,3))
list(c(1,2,3), 4)
length(list(1,2,3))
source('~/.active-rstudio-document', echo=TRUE)
combs(c(1,2,3))
source('~/.active-rstudio-document', echo=TRUE)
combs(c(1,2,3))
install.packages("twitteR")
today_trends[1:10]
library(twitteR)
today_trends[1:10]
today_trends
publicTimeline
library(twitteR)
?twitteR
version()
RVER
versio
R.Version()
install.packages(installr)
install.packages("installr")
R.Version()
library(twitteR)
today_trends
trends_today
woeid = availableTrendLocations[1, "woeid"]
woeid = availableTrendLocations(1, "woeid")
install.package
install.packages
install.packages("seewave")
pwd()
getwd()
cd
?wd
?getwd
setwd("/Users/josecambronero/MS/S15/aquery/test")
read.csv("group_sorting.csv")
data <- read.csv("group_sorting.csv")
data$nr <- data$nr / 1e6
names(data)
data$grpsz <- data$grpsz / 1e3
library(plyr)
library(ggplot2)
?ggplot
head(data)
ggplot(data = data, aes(x = grpsz, y = time)) + geom_line() + facet_grid(strat ~ grptype + nc + spec)
ggplot(df, aes(x = gp, y = y, group = strat)) +
geom_point(aes(color = strat) +
geom_point(data = ds, aes(y = mean),
colour = 'red', size = 3)
geom_point(aes(color = strat)) +
ggplot(df, aes(x = gp, y = y, group = strat)) +
ggplot(data = data, aes(x = grpsz, y = time, group = strat)) + geom_line(aes(color = strat)) + facet_grid(strat ~ grptype + nc + spec)
strat
ggplot(data = data, aes(x = grpsz, y = time, group = strat)) + geom_line() + facet_grid(strat ~ grptype + nc + spec)
ggplot(data = data, aes(x = grpsz, y = time, group = strat)) + geom_line() + facet_grid(grptype  ~  nc + spec)
ggplot(data = data, aes(x = grpsz, y = time, group = strat)) + geom_line(aes(color = strat)) + facet_grid(grptype  ~  nc + spec)
setwd("/Users/josecambronero/MS/S15/aquery/test")
data <- read.csv("group_sorting.csv")
data$nr <- data$nr / 1e6
data$grpsz <- data$grpsz / 1e3
data
data <- read.csv("group_sorting.csv")
data$nr <- data$nr / 1e6
data$grpsz <- data$grpsz / 1e3
library(plyr)
library(ggplot2)
head(data)
ggplot(data = data, aes(x = grpsz, y = time, group = strat)) + geom_line(aes(color = strat)) + facet_grid(grptype  ~  nc + spec)
head(Data)
head(data)
ggplot(data = data, aes(x = grpsz, y = time, group = strat)) +
geom_line(aes(color = strat)) +
facet_grid(grptype  ~  nc + spec, scales="free")
?opts
ggplot(data = data, aes(x = grpsz, y = time, group = strat)) +
geom_line(aes(color = strat)) +
facet_grid(grptype  ~  nc + spec, scales="free") +
theme(axis.text.y = element_text(angle = 90))
?element_text
ggplot(data = data, aes(x = grpsz, y = time, group = strat)) +
geom_line(aes(color = strat)) +
facet_grid(grptype  ~  nc + spec, scales="free") +
theme(axis.text.x = element_text(angle = 90))
setwd("/Users/josecambronero/MS/S15/aquery/test")
data <- read.csv("group_sorting.csv")
data$nr <- data$nr / 1e6
data$grpsz <- data$grpsz / 1e3
setwd("/Users/josecambronero/MS/S15/aquery/test")
data <- read.csv("group_sorting.csv")
setwd("/Users/josecambronero/MS/S15/aquery/test")
data <- read.csv("group_sorting.csv")
data$nr <- data$nr / 1e6
library(plyr)
library(ggplot2)
head(data)
ggplot(data = data, aes(x = ngrps, y = time, group = strat)) +
geom_line(aes(color = strat)) +
facet_grid(grptype  ~  nc + spec, scales="free") +
theme(axis.text.x = element_text(angle = 90))
?labs
ggplot(data = data, aes(x = ngrps, y = time, group = strat)) +
geom_line(aes(color = strat)) +
facet_grid(grptype  ~  nc + spec, scales="free") +
theme(axis.text.x = element_text(angle = 90)) +
labs(x = "# of groups", y = "running time (ms)")
setwd("/Users/josecambronero/MS/S15/aquery/test")
data <- read.csv("group_sorting.csv")
data$nr <- data$nr / 1e6
data$ngrps <- data$ngrps / 1e3
library(plyr)
library(ggplot2)
head(data)
ggplot(data = data, aes(x = ngrps, y = time, group = strat)) +
geom_line(aes(color = strat)) +
facet_grid(grptype  ~  nc + spec, scales="free") +
theme(axis.text.x = element_text(angle = 90)) +
labs(x = "# of groups", y = "running time (ms)")
setwd("/Users/josecambronero/MS/S15/aquery/test")
data <- read.csv("group_sorting.csv")
head(data)
data$nr <- data$nr / 1e6
ggplot(data = data, aes(x = ngrps, y = time, group = strat)) +
geom_line(aes(color = strat)) +
facet_grid(grptype  ~  nc, scales="free") +
theme(axis.text.x = element_text(angle = 90)) +
labs(x = "# of groups", y = "running time (ms)")
head(data)
ggplot(data = data, aes(x = ngrps, y = time, group = strat)) +
geom_line(aes(color = strat)) +
facet_grid(atype  ~  nc, scales="free") +
theme(axis.text.x = element_text(angle = 90)) +
labs(x = "# of groups", y = "running time (ms)")
setwd("/Users/josecambronero/MS/S15/aquery/test")
data <- read.csv("group_sorting.csv")
data$nr <- data$nr / 1e6
data$ngrps <- data$ngrps / 1e3
library(plyr)
library(ggplot2)
dat
data
setwd("/Users/josecambronero/MS/S15/aquery/test")
data <- read.csv("group_sorting.csv")
data$nr <- data$nr / 1e6
data$ngrps <- data$ngrps / 1e3
library(plyr)
library(ggplot2)
head(data)
ggplot(data = data, aes(x = ngrps, y = time, group = strat)) +
geom_line(aes(color = strat)) +
facet_wrap( ~  nc, scales="free") +
theme(axis.text.x = element_text(angle = 90)) +
labs(x = "# of groups", y = "running time (ms)")
ggplot(data = data, aes(x = ngrps, y = time, group = strat)) +
geom_line(aes(color = strat)) +
facet_wrap( ~  nc, scales="free_y") +
theme(axis.text.x = element_text(angle = 90)) +
labs(x = "# of groups", y = "running time (ms)")
data$ngrps <- as.factor(data$ngrps)
setwd("/Users/josecambronero/MS/S15/aquery/test")
data <- read.csv("group_sorting.csv")
data$nr <- data$nr / 1e6
data$ngrps <- as.factor(data$ngrps)
library(plyr)
library(ggplot2)
ggplot(data = data, aes(x = ngrps, y = time, group = strat)) +
geom_line(aes(color = strat)) +
facet_wrap( ~  nc, scales="free_y") +
theme(axis.text.x = element_text(angle = 90)) +
labs(x = "# of groups", y = "running time (ms)")
full_graph <- ggplot(data = data, aes(x = ngrps, y = time, group = strat)) +
geom_line(aes(color = strat)) +
facet_wrap( ~  nc, scales="free_y") +
theme(axis.text.x = element_text(angle = 90)) +
labs(x = "# of groups", y = "running time (ms)")
1 in c(1,2,3)
1 %in% c(1,2,3)
head(data)
subset(data, !ngrps %in% c("10000","1000000"))
reduced_graph <- full_graph %+% subset(data, !ngrps %in% c("10000","100000","1000000"))
reduced_graph
reduced_graph <- full_graph %+% subset(data, !ngrps %in% c("100000","1000000"))
reduced_graph <- reduced_graph + labs(title="Reduced comparison,excludes cases with >10k groups")
reduced_graph
?pdf
pdf(file = "/Users/josecambronero/MS/S15/aquery/test/grp_viz.pdf")
print(full_graph)
print(reduced_graph)
dev.off()
dev.off()
source('~/MS/S15/aquery/test/grp_viz.r', echo=TRUE)
