/ 
	A regression test set for aquery to q.
	The general goal will be to use this as the "native" q test set
 	and compare to performance by q generated by aquery compiler
\


\S 10
show "creating regression test set"
//t, e.g. many observations of few instances, and few features
//for this we will borrow the idea of stock trades from Dr. Shasha's regressiont test in 
tickers:`ibm`hp`goog`aapl`fb
il:`long$1e7
t:([]ticker:il?tickers;  date:il?.z.D; px:il?100.; size:il?`long$1e5)
st:`ticker`date`closingpx`traded xcol update px:count[px]?px from (floor count[t]*0.25)?t //creating additional table with roughly 25% of the # of records as t

/
    Section 1: base query tests
\

//Test 1.1: simple selection of column subset
.aq.test.t11:{system"ts 0N!select ticker, px, date from t"}

//Test 1.2: simple selection of column subset with 1 constraint
.aq.test.t12:{system"ts 0N!select ticker, px, date from t where ticker=`ibm"}

//Test 1.3: simple selection of column subset with multiple constraints
.aq.test.t13:{system"ts 0N!select ticker, px, date from t where ticker=`ibm, size>1000"}

//Test 1.4: calculating group-by based aggregation
.aq.test.t14:{system"ts 0N!select avg px by ticker from t"}

//Test 1.5: calculating multiple group-by based aggregations
.aq.test.t15:{system"ts 0N!select avg px, min size, max date by ticker from t"}

//Test 1.6: multiple group-by based aggregations and 1 constraint
.aq.test.t16:{system"ts 0N!select avg px, min size by ticker from t where ticker=`fb"}

//Test 1.7: multiple group-by based aggregations and multiple constraints
.aq.test.t17:{system"ts 0N!select avg px, min size by ticker from t where ticker=`fb, date=2013.02.04, size > 100"}

//Test 1.8: simple sorting by ticker and within that by date
.aq.test.t18:{system"ts 0N!`ticker`date xasc t"}

//Test 1.9: combining selection, sorting and constraint
.aq.test.t19:{system "ts 0N!select ticker, px from `ticker`date xasc t where size>100"}

//Test 1.10: combining selection, sorting, aggregate based on sorting, and constraint
.aq.test.t110:{system "ts 0N!select min date by ticker from `ticker`date xasc t where size>100"}

/
   Section 2: Testing joins and their use in queries
\

//Test 2.1: simple join and aggregate
.aq.test.t21:{system"ts 0N!select diff:avg px-closingpx by ticker from t lj `date`ticker xkey st"}

//Test 2.2: join, with constraints, and aggregate
.aq.test.t22:{system "ts 0N!select diff:avg px-closingpx by ticker from t lj `date`ticker xkey st where date.year=2000"}

//Test 2.3: join, pushing down constraints, and aggregate (Note that the nested query is not allowed in aquery, sthg like this would solely come from optim stage)
.aq.test.t23:{system "ts 0N!select diff:avg px-closingpx by ticker from (select from t where date.year=2000) lj `date`ticker xkey select from st where date.year=2000"}


/
    Section 3: Testing local queries, for q, we will create "locals" by taking advantage of the function call, creating all "locals"
    as local function variables
\

//Test 3.1: using local queries for moving averages example
.aq.test.t31:{
    r:system"ts temp:select date, a21:21 mavg px, a5:5 mavg px by ticker from `ticker`date xasc t";
    r+system"ts 0N!select ticker, date from ungroup temp where a21>a5,prev[a21]<=prev a5,prev[ticker]=ticker"
    }

//Test 3.2: using nested queries (not allowed in aquery) for moving averages example.
.aq.test.t32:{system"ts 0N!select from (update a21:21 mavg px, a5:5 mavg px by ticker from `ticker`date xasc t) where a21>a5, prev[a21]<=prev a5, prev[ticker]=ticker"}


/
    Section 4: table creation,  insert/update/delete statements
\

//Test 4.1: create a table
.aq.test.t41:{system"ts 0N!([]ticker:`$(); px:`float$(); size:`long$())"}

//Test 4.2: create table and populate using values
.aq.test.t42:{
    r:system "ts temp:([]ticker:`$(); px:`float$(); size:`long$())";
    r+system "ts 0N!`temp upsert flip (`a`b`c`d`e`f`g`h;1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8;1 2 3 4 5 6 7 8)"
    }

//Test 4.3: create a table and populate using query (cols in same order)
.aq.test.t43:{
    r:system"ts temp:([]ticker:`$(); px:`float$(); size:`long$())";
    r+system"ts 0N!`temp upsert select ticker, px, size from t where ticker=`fb"
 };

//Test 4.4: create table, populate with query, but using different column order
.aq.test.t44:{
    r:system"ts temp:([]ticker:`$(); size:`long$(); px:`float$())";
    r+system"ts 0N!`temp upsert `ticker`size`px xcols select ticker, px, size from t where ticker=`fb"
 }

//Test 4.5: update a new column to hold the minimum price for a ticker
.aq.test.t45:{system"ts 0N!update minpx:min px by ticker from `t"}

//Test 4.6: update a new column to hold the first price per ticker, assuming sorted by year
.aq.test.t46:{system"ts 0N!update firstyrpx:first px by ticker from `date xasc `t"}

//Test 4.7: delete rows associated with the first 14 trade days listed in our table
.aq.test.t47:{system"ts 0N!delete from `date xasc `t where date in 14 sublist distinct date"}


.aq.test.runTests:{{x[]} each ``runTests _ .aq.test}



