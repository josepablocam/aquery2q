
/********************************************************** 
***********Examples from aquery thesis*********************
**********************************************************/

/* pg 24 */
SELECT price
FROM Ticks
    ASSUMING ASC timestamp
WHERE ID = "ACME"

/* pg 25, example 3.1 */
SELECT max(price - mins(price))
FROM Ticks
    ASSUMING ASC timestamp
WHERE ID="ACME" AND
    date = '05/11/2003'


/* pg 29, example 3.3 */
SELECT src, dest, avg(length), count(timestamp)
FROM Packets
    ASSUMING ASC src, DESC dest, ASC timestamp
GROUP BY src, dest, sums(deltas(timestamp) > 120)

/* pg 30, example 3.4 */
WITH
    averages (ID, date, a21, a5) AS
    (SELECT ID, date, avgs(21, price) as a21,
      avgs(5, price) as a5 FROM Ticks
        ASSUMING ASC ID, ASC timestamp
     GROUP BY ID)
 SELECT ID, date 
 FROM FLATTEN(averages)
    ASSUMING ASC ID, ASC timestamp
 WHERE a21 > a5 AND
       prev(a21) <= prev(a5) AND
       prev(ID) = ID

/* pg 32, example 3.5 */
SELECT t.ID, last(10, price)
FROM Ticks t, Portfiolio p
    ASSUMING ASC timestamp
WHERE t.ID = p.ID
GROUP BY t.ID

/* pg 33, example 3.6 */
WITH
    OneDay AS
    (SELECT ID, price, timestamp
     FROM Ticks
        ASSUMING ASC timestamp
     WHERE date = '05/11/2003')
 SELECT ID, count(*) 
 FROM OneDay
    ASSUMING ASC timestamp
    WHERE ROWID < 1000
    GROUP BY ID

/* pg 35 */
SELECT src, dest, avg(length), count(timestamp)
FROM Packets
    ASSUMING ASC src, DESC dest, ASC timestamp
GROUP BY src, dest, sums(deltas(timestamp) > 120)

/********************************************************** 
***********Examples from aquery presentation notes*********
**********************************************************/


/* moving average over arrables*/
SELECT month, avgs(3, sales) 
FROM Sales 
ASSUMING ASC month

/* best profit query comparison */
SELECT max(price - mins(price))
FROM ticks
    ASSUMING ASC timestamp
WHERE ID="S"
AND tradeDate='01/10/2003'

/* network management query revisited */
SELECT src, dst, count(*), avg(len)
FROM Packets
    ASSUMING ASC src, DESC dst, ASC time
GROUP BY src, dst, sums(deltas(time) > 120)


/* Interchange sorting + order preserving operators */
SELECT ts.ID, avgs(10, hq.ClosePrice) 
FROM TradedStocks AS ts INNER JOIN
    HistoricQuotes AS hq
	ON ts.ID=hq.ID AND ts.TradeDate=hq.date //note use of ON given differing col names
ASSUMING ASC hq.TradeDate
GROUP BY Id


/* last price for a name query */

SELECT last(price)
FROM ticks t, base b
    ASSUMING ASC name, ASC timestamp
WHERE t.ID = b.ID AND name = "x"

/********************************************************** 
***********Extended Miscellaneous Aquery Examples**********
**********************************************************/



/* simple function definition */
FUNCTION myfunction(x,y) { x + y }

/* function definition with local variables */
FUNCTION pythag(x, y) {
    sqr_x := x * x;
    sqr_y := y * y;
    sqrt(sqr_x + sqr_y)
}


/* table creation  with schema */
CREATE TABLE my_table (c1 INT, c2 FLOAT, c3 DATE)

/* table creation with query */
CREATE TABLE my_table AS
	SELECT c1, c2, c3 FROM other_table
	ASSUMING ASC c1
	

/* update statement */
UPDATE my_table SET
		c2 = first(c1)
		ASSUMING ASC c1
		WHERE c2 IS NULL


		
/* insert statement */
INSERT INTO my_table ASSUMING ASC c3 
	(c2, c1, c3) VALUES (2.3, 10, '01/01/1990')
	
/* delete statement */
DELETE c2 FROM my_table

/* delete statement */
DELETE FROM my_table ASSUMING ASC c1, DESC c2 WHERE c1 = first(c2)

/* using case statement in select */
SELECT
	CASE 
		WHEN c1 IS NULL THEN c2
		ELSE c1
	END as c1_filled FROM t



	


