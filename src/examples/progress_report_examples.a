/*
    This represents an adaption of the Aquery thesis/presentation examples to accomodate
    limitations in the aquery to q compiler (as of 05/17/15). The exact limitations
    are outlined in the accompanying "The Good, the Bad, and the Ugly" paper.

    We note which examples are completely unchanged (and modulo column naming, should correspond
    to the desired results )
*/






/**********************************************************
***********Examples from aquery thesis*********************/

/* UNCHANGED */
/* pg 24 */
SELECT price
FROM Ticks
    ASSUMING ASC timestamp
WHERE ID = "ACME"

/* UNCHANGED */
/* pg 25, example 3.1 */
SELECT max(price - mins(price))
FROM Ticks
    ASSUMING ASC timestamp
WHERE ID="ACME" AND
    date = '05/11/2003'


/* MODIFIED:
    1 - convert 120 to nanoseconds
*/
/* pg 29, example 3.3 */
SELECT src, dest, avg(length), count(timestamp)
FROM Packets
    ASSUMING ASC src, DESC dest, ASC timestamp
GROUP BY src, dest, sums(deltas(timestamp) > (120 * 1000000000))

/* MODIFIED:
    - note that since we decided that aquery should treat selections as a sequence
     (as order of selections matters given the semantics of inter-row dependence produced by column-wise aggregates), I've modified this example to use & rather than AND, as & does break up our selection into a sequence, but rather tells aquery to treat it as 1 expression (similar to & vs , in q where clauses)
    - I explicitly included timestamp in the projections for the temp table (averages), since i haven't yet implemented a way to add the group-bys automatically to the projections
     */
/* pg 30, example 3.4 */
WITH
    averages (ID, date, timestamp, a21, a5) AS
    (SELECT ID, date, timestamp , avgs(21, price),
      avgs(5, price) FROM Ticks
        ASSUMING ASC ID, ASC timestamp
     GROUP BY ID)
 SELECT ID, date
 FROM FLATTEN(averages)
    ASSUMING ASC ID, ASC timestamp
 WHERE a21 > a5 &
       prev(a21) <= prev(a5) &
       prev(ID) = ID

/* MODIFIED:
    1 - changed Ticks t, Portfolio p to Ticks t INNER JOIN Portfolio p USING ID
*/
/* pg 32, example 3.5 */
SELECT t.ID, last(10, price)
FROM Ticks t INNER JOIN Portfolio p USING ID
    ASSUMING ASC timestamp
GROUP BY t.ID

/* MODIFIED:
 1 - added explicit names to the projections in the
 temporary table
 2 - replaced count(*) with count(ID), ROWID is translated to i, and i when grouped is just 1 per group...need to fix this
 3 - add first to ID to avoid vector after group by
*/
/* pg 33, example 3.6 */
WITH
    OneDay AS
    (SELECT ID as ID, price as price, timestamp as timestamp
     FROM Ticks
        ASSUMING ASC timestamp
     WHERE date = '05/11/2003')
 SELECT ID, count(ID)
 FROM OneDay
    ASSUMING ASC timestamp
    WHERE ROWID < 1000
    GROUP BY ID

/* REPEATED */
/* pg 35 */
//SELECT first(src), first(dest), avg(length), count(timestamp)
//FROM Packets
//    ASSUMING ASC src, DESC dest, ASC timestamp
//GROUP BY src, dest, sums(deltas(timestamp) > 120)

/**********************************************************
***********Examples from aquery presentation notes*********
**********************************************************/

/* UNCHANGED */
/* moving average over arrables*/
SELECT month, avgs(3, sales)
FROM Sales
ASSUMING ASC month

/* REPEATED */
/* best profit query comparison */
//SELECT max(price - mins(price))
//FROM Ticks
//    ASSUMING ASC timestamp
//WHERE ID="S"
//AND tradeDate='01/10/2003'

/* REPEATED */
/* network management query revisited */
//SELECT first(src), first(dest), count(ROWID), avg(len)
//FROM Packets
//    ASSUMING ASC src, DESC dest, ASC time
//GROUP BY src, dest, sums(deltas(time) > 120)



/* Interchange sorting + order preserving operators */
//SELECT ts.ID, avgs(10, hq.ClosePrice)
//FROM TradedStocks AS ts INNER JOIN
//    HistoricQuotes AS hq
//	ON ts.ID=hq.ID AND ts.TradeDate=hq.date note use of ON given differing col names
//ASSUMING ASC hq.TradeDate
//GROUP BY Id


/* MODIFIED:
 1 - replaced INNER JOIN ON with INNER JOIN USING (which means I have also renamed
    the columns as necessary
 - the original query is found above (commented-out)
*/

SELECT ID, avgs(10, hq.ClosePrice)
FROM TradedStocks AS ts INNER JOIN
    HistoricQuotes AS hq
	USING (ID, date)
ASSUMING ASC date
GROUP BY ID //can use ID since both ts and hq have it and joined using (ts.ID = hq.ID = ID)


/* MODIFIED: replaced Ticks t, base b with t inner join b using ID
/* last price for a name query */

SELECT last(price)
FROM Ticks t INNER JOIN base b USING ID
    ASSUMING ASC name, ASC timestamp
WHERE name = "x"

/**********************************************************
***********Miscellaneous Aquery Examples**********
**********************************************************/



/* simple function definition */
FUNCTION myfunction(x,y) { x + y }

/* function definition with local variables */
FUNCTION pythag(x, y) {
    sqr_x := x * x;
    sqr_y := y * y;
    sqrt(sqr_x + sqr_y)
}


// Testing push filters (TicksWithAttr.ID has attribute, and we test a non-equality selection)
SELECT * from TicksWithAttr t INNER JOIN Portfolio p USING ID WHERE t.ixCol < 1000

//INSERTIONS
INSERT INTO t1 assuming asc c1 select * from t2
INSERT INTO t1(c2, c1) VALUES(-1, -2)

//UPDATES
UPDATE tu1 SET c3 = last(sums(c2)) ASSUMING ASC c2 WHERE c1 < 3 GROUP BY c1, c2 HAVING count(c2) >= 2

UPDATE tu2 SET c3 = max(c2) WHERE c1 > 0

//DELETES
DELETE FROM td1 ASSUMING ASC c2 where c1 < 3 group by c1 having count(c2) > 1
DELETE c2 FROM td2
